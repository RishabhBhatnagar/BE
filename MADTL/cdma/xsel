     1	from functools import reduce
     2	
     3	
     4	class User:
     5	     def __init__(self, code):
     6	          # code is a list of 1 and -1.
     7	          # All the users has same number of bits in the code.
     8	          # with length equal to number of users.
     9	          self.code = code
    10	     def __mul__(self, num):
    11	          return [num * bit for bit in self.code]
    12	     def __add__(self, oth):
    13	          return [a + b for a, b in zip(self.code, oth)]
    14	     def __repr__(self):
    15	          return self.code.__str__()
    16	     __rmul__ = __mul__
    17	
    18	
    19	def algo():
    20	     avail_codes = [
    21	          [1] * 4,
    22	          [1, -1, 1, -1],
    23	          [1, 1, -1, -1],
    24	          [1, -1, -1, 1]
    25	     ]
    26	     users = [User(code) for code in avail_codes]
    27	     data = tuple(map(int, input("Enter the data of the four stations: ").split()))
    28	     garbled = [num * user for num, user in zip(data, users)]
    29	     final_code = User([sum(codes) for codes in zip(*garbled)])
    30	     which_channel = int(input('Enter the channel you want to listen to[0-4]: '))
    31	     decoded = sum([num * user for num, user in zip(final_code.code, users[which_channel].code)]) >> 2
    32	     print(decoded, 'is the data.')
    33	     
    34	if __name__ == '__main__':
    35	     algo()
    36	
    37	
    38	
    39	
    40	"""
    41	OUTPUT:
    42	Enter the data of the four stations: 48 17 50 87
    43	Enter the channel you want to listen to[0-4]: 3
    44	87 is the data.
    45	"""
     1	from functools import reduce
     2	
     3	
     4	class User:
     5	     def __init__(self, code):
     6	          # code is a list of 1 and -1.
     7	          # All the users has same number of bits in the code.
     8	          # with length equal to number of users.
     9	          self.code = code
    10	     def __mul__(self, num):
    11	          return [num * bit for bit in self.code]
    12	     def __add__(self, oth):
    13	          return [a + b for a, b in zip(self.code, oth)]
    14	     def __repr__(self):
    15	          return self.code.__str__()
    16	     __rmul__ = __mul__
    17	
    18	
    19	def algo():
    20	     avail_codes = [
    21	          [1] * 4,
    22	          [1, -1, 1, -1],
    23	          [1, 1, -1, -1],
    24	          [1, -1, -1, 1]
    25	     ]
    26	     users = [User(code) for code in avail_codes]
    27	     data = tuple(map(int, input("Enter the data of the four stations: ").split()))
    28	     garbled = [num * user for num, user in zip(data, users)]
    29	     final_code = User([sum(codes) for codes in zip(*garbled)])
    30	     which_channel = int(input('Enter the channel you want to listen to[0-4]: '))
    31	     decoded = sum([num * user for num, user in zip(final_code.code, users[which_channel].code)]) >> 2
    32	     print(decoded, 'is the data.')
    33	     
    34	if __name__ == '__main__':
    35	     algo()
    36	
    37	
    38	
    39	
    40	"""
    41	OUTPUT:
    42	Enter the data of the four stations: 48 17 50 87
    43	Enter the channel you want to listen to[0-4]: 3
    44	87 is the data.
    45	"""
